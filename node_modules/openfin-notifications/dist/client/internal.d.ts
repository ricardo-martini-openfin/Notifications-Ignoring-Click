/**
 * @hidden
 */
/**
 * File contains types used to communicate between client and provider.
 *
 * These types are a part of the client, but are not required by applications wishing to interact with the service.
 * This file is excluded from the public-facing TypeScript documentation.
 */
import { NotificationActionResult, ActionTrigger } from './actions';
import { ProviderStatus } from './provider';
import { NotificationSource } from './source';
import { NotificationOptions, Notification, NotificationActionEvent, NotificationClosedEvent, NotificationCreatedEvent, NotificationsCountChanged, NotificationFormSubmittedEvent } from './index';
/**
 * The identity of the main application window of the service provider
 */
export declare const SERVICE_IDENTITY: {
    uuid: string;
    name: string;
};
/**
 * Name of the IAB channel use to communicate between client and provider
 */
export declare const SERVICE_CHANNEL = "of-notifications-service-v1";
export declare const enum APITopic {
    CREATE_NOTIFICATION = "create-notification",
    CLEAR_NOTIFICATION = "clear-notification",
    GET_APP_NOTIFICATIONS = "fetch-app-notifications",
    CLEAR_APP_NOTIFICATIONS = "clear-app-notifications",
    TOGGLE_NOTIFICATION_CENTER = "toggle-notification-center",
    ADD_EVENT_LISTENER = "add-event-listener",
    REMOVE_EVENT_LISTENER = "remove-event-listener",
    GET_PROVIDER_STATUS = "get-provider-status",
    GET_NOTIFICATIONS_COUNT = "get-notifications-count"
}
export interface API {
    [APITopic.CREATE_NOTIFICATION]: [CreatePayload, NotificationInternal];
    [APITopic.CLEAR_NOTIFICATION]: [ClearPayload, boolean];
    [APITopic.CLEAR_APP_NOTIFICATIONS]: [undefined, number];
    [APITopic.GET_APP_NOTIFICATIONS]: [undefined, NotificationInternal[]];
    [APITopic.TOGGLE_NOTIFICATION_CENTER]: [undefined, void];
    [APITopic.ADD_EVENT_LISTENER]: [Events['type'], void];
    [APITopic.REMOVE_EVENT_LISTENER]: [Events['type'], void];
    [APITopic.GET_PROVIDER_STATUS]: [undefined, ProviderStatus];
    [APITopic.GET_NOTIFICATIONS_COUNT]: [undefined, number];
}
export declare type Events = NotificationActionEvent | NotificationClosedEvent | NotificationCreatedEvent | NotificationsCountChanged | NotificationFormSubmittedEvent;
export declare type TransportMappings<T> = T extends NotificationActionEvent ? NotificationActionEventTransport : never;
export declare type TransportMemberMappings<T> = T extends Notification ? NotificationInternal : T;
export declare type CreatePayload<T extends NotificationOptions = NotificationOptions> = DistributiveOmit<T, 'date' | 'expires'> & {
    date?: number;
    expires?: number | null;
};
export declare type NotificationInternal<T extends NotificationOptions = NotificationOptions> = DistributiveOmit<Notification<T>, 'date' | 'expires'> & {
    date: number;
    expires: number | null;
};
export interface ClearPayload {
    id: string;
}
export interface NotificationActionEventTransport {
    type: 'notification-action';
    notification: Readonly<NotificationInternal>;
    source: NotificationSource;
    result: NotificationActionResult;
    trigger: ActionTrigger;
    controlSource?: 'buttons';
    controlIndex?: number;
}
/**
 * Distribute Omit across all union types instead of Omitting the union.
 * https://davidgomes.com/pick-omit-over-union-types-in-typescript/
 */
export declare type DistributiveOmit<T, K extends keyof T> = T extends unknown ? Omit<T, K> : never;
