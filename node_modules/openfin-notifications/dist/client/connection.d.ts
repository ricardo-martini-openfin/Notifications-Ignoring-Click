/**
 * @hidden
 */
/// <reference types="node" />
/**
 * File contains vars used to establish service connection between client and provider.
 *
 * These are separated out from 'internal.ts' as including these from provider code will cause the provider to connect
 * to itself.
 *
 * These types are a part of the client, but are not required by applications wishing to interact with the service.
 * This file is excluded from the public-facing TypeScript documentation.
 */
import { EventEmitter } from 'events';
import { ChannelClient } from 'openfin/_v2/api/interappbus/channel/client';
import { APITopic, API, Events } from './internal';
import { EventRouter } from './EventRouter';
/**
 * The event emitter to emit events received from the service.  All addEventListeners will tap into this.
 */
export declare const eventEmitter: EventEmitter;
export declare function getServicePromise(): Promise<ChannelClient>;
/**
 * Wrapper around service.dispatch to help with type checking
 * @param action Action type.
 * @param payload Data payload to send to the provider.
 */
export declare function tryServiceDispatch<T extends APITopic>(action: T, payload: API[T][0]): Promise<API[T][1]>;
export declare function getEventRouter(): EventRouter<Events>;
