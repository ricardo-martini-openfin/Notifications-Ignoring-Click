"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const wire_1 = require("./wire");
const transport_errors_1 = require("./transport-errors");
const openfin_renderer_api_1 = require("../environment/openfin-renderer-api");
let ElIPCTransport = /** @class */ (() => {
    class ElIPCTransport extends events_1.EventEmitter {
        constructor(onmessage) {
            super();
            this.wire = openfin_renderer_api_1.ipc;
            this.connectSync = () => {
                openfin_renderer_api_1.ipc.on(openfin_renderer_api_1.inboundTopic, (sender, data) => {
                    this.onmessage(JSON.parse(data));
                });
            };
            this.connect = (address) => {
                throw new transport_errors_1.NotImplementedError('Not Implemented');
            };
            this.send = (data, flags) => {
                openfin_renderer_api_1.ipc.send(openfin_renderer_api_1.routingId, openfin_renderer_api_1.outboundTopic, JSON.parse(JSON.stringify(data)));
                return Promise.resolve();
            };
            this.shutdown = () => {
                return Promise.reject(new Error('Not Implemented'));
            };
            this.onmessage = onmessage;
        }
    }
    ElIPCTransport.READY_STATE = wire_1.READY_STATE;
    return ElIPCTransport;
})();
exports.default = ElIPCTransport;
