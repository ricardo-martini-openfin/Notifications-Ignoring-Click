import type { ApplicationOption } from '../api/application/applicationOption';
import type { ViewCreationOptions, View } from '../api/view';
import type { Layout } from './Layout';
import type EntityType from './EntityType';
import type { WindowOptions } from './WindowOptions';
import type { MonitorInfo } from '../api/system/monitor';
import type { WindowOption } from '../api/window/windowOption';
import type { WindowOptionsChangedEvent } from '../api/events/window';
import { Constructor } from './Constructor';
export declare enum HostContextChangedReasons {
    updated = "updated",
    reparented = "reparented"
}
export declare enum WindowCreationReason {
    Tearout = "tearout",
    CreateViewWithoutTarget = "create-view-without-target",
    APICall = "api-call",
    AppCreation = "app-creation",
    Restore = "restore"
}
export interface PlatformWindowCreationOptions extends Partial<WindowOption> {
    reason?: WindowCreationReason;
}
export declare type HostContextChangedPayload = {
    context: any;
    reason: HostContextChangedReasons;
};
export interface ApplySnapshotOptions {
    closeExistingWindows?: boolean;
    skipOutOfBoundsCheck?: boolean;
}
export interface ApplySnapshotPayload {
    snapshot: Snapshot;
    options?: ApplySnapshotOptions;
}
export interface CreateViewPayload {
    opts: ViewCreationOptions;
    target: OpenFin.Identity;
}
export interface CloseViewPayload {
    view: OpenFin.Identity;
}
export interface FetchManifestPayload {
    manifestUrl: string;
}
export interface ReplaceLayoutOpts {
    layout: Layout;
}
export interface ReplaceLayoutPayload {
    opts: ReplaceLayoutOpts;
    target: OpenFin.Identity;
}
export interface SetWindowContextPayload {
    context: any;
    entityType: EntityType;
    target: OpenFin.Identity;
}
export interface GetWindowContextPayload {
    entityType: EntityType;
    target: OpenFin.Identity;
}
export interface PlatformOptions extends ApplicationOption {
    defaultWindowOptions?: DefaultWindowOptions;
    defaultViewOptions?: ViewCreationOptions;
    disableDefaultCommands?: boolean;
}
export interface Snapshot {
    windows: WindowOptions[];
    snapshotDetails?: {
        monitorInfo: MonitorInfo;
        runtimeVersion: string;
        timestamp: string;
    };
}
export interface DefaultWindowOptions extends WindowOption {
    stylesheetUrl: string;
}
export interface PlatformProvider {
    /**
     * Handles requests to create a window in the current platform.
     * @param { WindowOption } payload Window options for the window to be created.
     * @param { Identity } [identity] If {@link Platform#createWindow Platform.createWindow} was called, the identity of the caller will be here.
     * If `createWindow` was called as part of applying a snapshot or creating a view without a target window, `identity` will be undefined.
     */
    createWindow(options: PlatformWindowCreationOptions, identity?: OpenFin.Identity): Promise<OpenFin.Window>;
    /**
     * Gets the current state of windows and their views and returns a snapshot object containing that info.
     * @param { undefined } payload Undefined unless you've defined a custom `getSnapshot` protocol.
     * @param { Identity } identity Identity of the entity that called {@link Platform#getSnapshot Platform.getSnapshot}.
     * @return { Promise<Snapshot> } Snapshot of current platform state.
     */
    getSnapshot(payload: undefined, identity: OpenFin.Identity): Promise<Snapshot>;
    /**
     * Called when a snapshot is being applied and some windows in that snapshot would be fully or partially off-screen.
     * Returns an array of windows with modified positions, such that any off-screen windows are positioned in the top left
     * corner of the main monitor.
     * @param { Snapshot } snapshot The snapshot to be applied.
     * @param { WindowOptions[] } outOfBoundsWindows An array of WindowOptions for any windows that would be off-screen.
     * @return { Promise<WindowOptions[]> } An array of WindowOptions with their position modified to fit on screen.
     */
    positionOutOfBoundsWindows(snapshot: Snapshot, outOfBoundsWindows: WindowOptions[]): Promise<WindowOptions[]>;
    /**
     * Handles requests to apply a snapshot to the current Platform.
     * @param { ApplySnapshotPayload } payload Payload containing the snapshot to be applied, as well as any options.
     * @param { Identity } [identity] Identity of the entity that called {@link Platform#applySnapshot Platform.applySnapshot}.
     * Undefined if called internally (e.g. when opening the initial snapshot).
     * @return { Promise<void> }
     */
    applySnapshot(payload: ApplySnapshotPayload, identity?: OpenFin.Identity): Promise<void>;
    /**
     * Closes the current Platform and all child windows and views.
     * @param { undefined } payload Undefined unless you have implemented a custom quite protocol.
     * @param { Identity } identity Identity of the entity that called {@link Platform#quit Platform.quit}.
     * @return { Promise<void> }
     */
    quit(payload: undefined, identity: OpenFin.Identity): Promise<void>;
    /**
     * Closes a view
     * @param { CloseViewPayload } payload Specifies the `target` view to be closed.
     * @param { Identity } identity Identity of the entity that called {@link Platform#closeView Platform.closeView}.
     */
    closeView(payload: CloseViewPayload, identity?: OpenFin.Identity): Promise<any>;
    /**
     * Creates a new view and attaches it to a specified target window.
     * @param { CreateViewPayload } payload Creation options for the new view.
     * @param { Identity } identity Identity of the entity that called {@link Platform#createView Platform.createView}.
     * @return { Promise<void> }
     */
    createView(payload: CreateViewPayload, identity: OpenFin.Identity): Promise<View>;
    /** Handles requests to fetch manifests in the current platform.
     * @param { FetchManifestPayload } payload Payload containing the manifestUrl to be fetched.
     * @param { Identity } callerIdentity If {@link Platform#fetchManifest Platform.fetchManifest}
     * was called, the identity of the caller will be here.
     * If `fetchManifest` was called internally, `callerIdentity` will be the provider's identity.
     */
    fetchManifest(payload: FetchManifestPayload, callerIdentity: OpenFin.Identity): Promise<any>;
    /**
     * Replaces a Platform window's layout with a new layout. Any views that were in the old layout but not the new layout will be destroyed.
     * @param { ReplaceLayoutPayload } payload Contains the `target` window and an `opts` object with a `layout` property to apply.
     * @param { Identity } [identity] Identity of the entity that called {@link Platform#replaceLayout Platform.replaceLayout}.
     * Undefined if `replaceLayout` is called internally (e.g. while applying a snapshot).
     * @return { Promise<void> }
     */
    replaceLayout(payload: ReplaceLayoutPayload, identity?: OpenFin.Identity): Promise<void>;
    /**
     * Handles requests to set a window's context. `target` may be a window or a view.
     * If it is a window, that window's `customContext` will be updated.
     * If it is a view, the `customContext` of that view's current host window will be updated.
     * @param { SetWindowContextPayload } payload Object containing the requested `context` update,
     * the `target`'s identity, and the target's `entityType`.
     * @param { Identity } [identity] Identity of the entity that called {@link Platform#setWindowContext Platform.setWindowContext}.
     * Undefined if `setWindowContext` is called internally (e.g. while applying a snapshot).
     * @return { Promise<any> } The new context.
     */
    setWindowContext(payload: SetWindowContextPayload, identity?: OpenFin.Identity): Promise<any>;
    /**
     * Handles requests to get a window's context. `target` may be a window or a view.
     * If it is a window, that window's `customContext` will be returned.
     * If it is a view, the `customContext` of that view's current host window will be returned.
     * @param { GetWindowContextPayload } payload Object containing the requested `context` update,
     * the `target`'s identity, and the target's `entityType`.
     * @param { Identity } [identity] Identity of the entity that called {@link Platform#getWindowContext Platform.getWindowContext}.
     * Undefined when `getWindowContext` is called internally
     * (e.g. when getting a window's context for the purpose of raising a "host-context-changed" event on a reparented view).
     * @return { Promise<any> } The new context.
     */
    getWindowContext(payload: GetWindowContextPayload, identity?: OpenFin.Identity): Promise<any>;
    /**
     * Called when a window's `customContext` is updated. Responsible for raising the `host-context-updated` event on that window's child views.
     * @param { WindowOptionsChangedEvent<'window', 'options-changed'> } payload The event payload for the window whose context has changed.
     * The new context will be contained as `payload.diff.customContext.newVal`.
     * @return { Promise<HostContextChangedPayload> } The event that it raised.
     */
    onWindowContextUpdated(payload: WindowOptionsChangedEvent<'window', 'options-changed'>): Promise<HostContextChangedPayload | undefined>;
}
export declare type OverrideCallback<T extends PlatformProvider = PlatformProvider> = (arg: Constructor<PlatformProvider>) => T | Promise<T>;
export interface InitPlatformOptions {
    overrideCallback: OverrideCallback;
}
