"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transport_errors_1 = require("../transport/transport-errors");
const EntityType_1 = require("../shapes/EntityType");
const openfin_renderer_api_1 = require("./openfin-renderer-api");
class OpenFinEnvironment {
    constructor() {
        this.writeToken = (path, token) => {
            throw new transport_errors_1.NotImplementedError('Not Implemented');
        };
        this.retrievePort = (config) => {
            throw new transport_errors_1.NotImplementedError('Not Implemented');
        };
        this.getNextMessageId = () => {
            return fin.desktop.getUuid();
        };
        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
        this.createChildContent = async ({ options, entityType }) => {
            const opts = this.normalizeOptions(options);
            return new Promise((y, n) => fin.__internal_.createChildContent({ entityType, options: opts }, y, n));
        };
        this.normalizeOptions = (options) => {
            const { uuid: parentUuid } = fin.__internal_.initialOptions;
            const opts = JSON.parse(JSON.stringify(options));
            const ABOUT_BLANK = 'about:blank';
            opts.uuid = opts.uuid || parentUuid;
            opts.url = opts.url || ABOUT_BLANK;
            if (opts.url !== ABOUT_BLANK) {
                opts.url = this.resolveUrl(opts.url);
            }
            return opts;
        };
        this.createChildWindow = (options) => {
            return new Promise((resolve, reject) => {
                const { uuid: parentUuid } = fin.__internal_.initialOptions;
                const opt = this.normalizeOptions(options);
                if (!opt.name || typeof opt.name !== 'string') {
                    return reject(new Error('Window must have a name'));
                }
                if (opt.uuid !== parentUuid) {
                    return reject(new Error(`Child window uuid must match the parent window's uuid: ${parentUuid}`));
                }
                if (!openfin_renderer_api_1.electronChildWindows) {
                    if (fin.__internal_.entityExists(opt.uuid, opt.name)) {
                        return reject(new Error(`Trying to create a Window with name-uuid combination already in use - ${JSON.stringify({
                            name: opt.name,
                            uuid: opt.uuid
                        })}`));
                    }
                    // we should register the window name with the core asap to prevent
                    // multiple windows claiming the same uuid-name combo
                    fin.__internal_.registerWindowName(opt.uuid, opt.name);
                }
                return fin.__internal_.createChildWindow(opt, (childWin) => {
                    resolve(childWin);
                }, reject);
            });
        };
        this.getRandomId = () => {
            const intArray = new Uint32Array(1);
            return window.crypto.getRandomValues(intArray)[0].toString(32);
        };
        this.isWindowExists = (uuid, name) => {
            return fin.__internal_.windowExists(uuid, name);
        };
        this.getWebWindow = (identity) => {
            return fin.__internal_.getWebWindow(identity.name);
        };
        this.getCurrentEntityIdentity = () => {
            return fin.__internal_.entityInfo;
        };
        this.getCurrentEntityType = () => {
            return this.getCurrentEntityIdentity().entityType || EntityType_1.default.UNKNOWN;
        };
        this.raiseEvent = (eventName, eventArgs) => {
            this.raiseEventAsync(eventName, eventArgs);
        };
        this.raiseEventAsync = fin.__internal_.raiseEventAsync;
        delete fin.__internal_.raiseEventAsync;
        this.electronChildWindows = openfin_renderer_api_1.electronChildWindows;
        this.childViews = openfin_renderer_api_1.childViews;
    }
    // eslint-disable-next-line class-methods-use-this
    resolveUrl(url) {
        const newUrl = new URL(url, location.href);
        return newUrl.href;
    }
}
exports.default = OpenFinEnvironment;
