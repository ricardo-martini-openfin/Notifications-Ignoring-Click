"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const crypto_1 = require("crypto");
const environment_1 = require("./environment");
const port_discovery_1 = require("../transport/port-discovery");
const transport_errors_1 = require("../transport/transport-errors");
const EntityType_1 = require("../shapes/EntityType");
class NodeEnvironment {
    constructor() {
        this.messageCounter = 0;
        this.electronChildWindows = false;
        this.childViews = false;
        this.writeToken = (path, token) => {
            return new Promise((resolve) => {
                fs_1.writeFile(path, token, () => resolve(token));
            });
        };
        this.retrievePort = (config) => {
            const pd = new port_discovery_1.default(config, this);
            return pd.retrievePort();
        };
        this.getNextMessageId = () => {
            // eslint-disable-next-line no-plusplus
            return this.messageCounter++;
        };
        this.createChildWindow = (options) => {
            throw new transport_errors_1.NotImplementedError('Not Implemented');
        };
        this.getRandomId = () => {
            return crypto_1.randomBytes(16).toString('hex');
        };
        this.isWindowExists = (uuid, name) => {
            throw new transport_errors_1.NotImplementedError('Not Implemented');
        };
        this.getWebWindow = (identity) => {
            throw new transport_errors_1.NotSupportedError('Not supported outside of OpenFin web context');
        };
        this.getCurrentEntityIdentity = () => {
            throw new transport_errors_1.NotImplementedError(environment_1.notImplementedEnvErrorMsg);
        };
        this.getCurrentEntityType = () => {
            return EntityType_1.default.EXTERNAL;
        };
        this.raiseEvent = (eventName, eventArgs) => {
            throw new transport_errors_1.NotImplementedError(environment_1.notImplementedEnvErrorMsg);
        };
    }
    // eslint-disable-next-line class-methods-use-this
    createChildContent(options) {
        throw new transport_errors_1.NotImplementedError('Not Implemented');
    }
}
exports.default = NodeEnvironment;
