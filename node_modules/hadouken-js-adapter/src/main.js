"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelProvider = exports.ChannelClient = exports.Notification = exports.Frame = exports.View = exports.System = exports.Window = exports.Application = exports.Fin = exports.launch = exports.connect = void 0;
const fin_1 = require("./api/fin");
exports.Fin = fin_1.default;
const application_1 = require("./api/application");
Object.defineProperty(exports, "Application", { enumerable: true, get: function () { return application_1.Application; } });
const window_1 = require("./api/window");
Object.defineProperty(exports, "Window", { enumerable: true, get: function () { return window_1._Window; } });
const view_1 = require("./api/view");
Object.defineProperty(exports, "View", { enumerable: true, get: function () { return view_1.View; } });
const client_1 = require("./api/interappbus/channel/client");
exports.ChannelClient = client_1.default;
const provider_1 = require("./api/interappbus/channel/provider");
Object.defineProperty(exports, "ChannelProvider", { enumerable: true, get: function () { return provider_1.ChannelProvider; } });
const frame_1 = require("./api/frame");
Object.defineProperty(exports, "Frame", { enumerable: true, get: function () { return frame_1._Frame; } });
const notification_1 = require("./api/notification");
Object.defineProperty(exports, "Notification", { enumerable: true, get: function () { return notification_1._Notification; } });
const system_1 = require("./api/system");
exports.System = system_1.default;
const wire_1 = require("./transport/wire");
const node_env_1 = require("./environment/node-env");
const transport_1 = require("./transport/transport");
const websocket_1 = require("./transport/websocket");
const port_discovery_1 = require("./transport/port-discovery");
const normalize_config_1 = require("./util/normalize-config");
const EntityType_1 = require("./shapes/EntityType");
const environment = new node_env_1.default();
// Connect to an OpenFin Runtime
async function connect(config) {
    var _a;
    const normalized = await normalize_config_1.validateConfig(config);
    const wire = new transport_1.default(websocket_1.default, environment, {
        ...normalized,
        entityType: EntityType_1.default.EXTERNAL,
        name: (_a = normalized.name) !== null && _a !== void 0 ? _a : normalized.uuid
    });
    await wire.connect(normalized);
    return new fin_1.default(wire);
}
exports.connect = connect;
async function launch(config) {
    const normalized = await normalize_config_1.normalizeConfig(config);
    if (!wire_1.isPortDiscoveryConfig(normalized)) {
        throw new Error('Invalid Config');
    }
    const pd = new port_discovery_1.default(normalized, environment);
    return pd.retrievePort();
}
exports.launch = launch;
