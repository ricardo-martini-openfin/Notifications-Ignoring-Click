"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateConfig = exports.normalizeConfig = void 0;
const fs = require("fs");
const wire_1 = require("../transport/wire");
const promises_1 = require("./promises");
const http_1 = require("./http");
async function readLocalConfig(location) {
    const txt = await promises_1.promisify(fs.readFile)(location);
    return JSON.parse(txt.toString());
}
async function loadConfig(config) {
    try {
        return await http_1.fetchJson(config.manifestUrl);
    }
    catch (e) {
        try {
            return await readLocalConfig(config.manifestUrl);
        }
        catch (error) {
            throw new Error(`Could not locate JSON at supplied manifestUrl: ${config.manifestUrl}`);
        }
    }
}
async function normalizeConfig(config) {
    const testThisConfig = config;
    if (wire_1.isExternalConfig(config)) {
        const loadedConfig = await loadConfig(config);
        testThisConfig.runtime = loadedConfig.runtime;
        if (typeof loadedConfig.assetsUrl === 'string') {
            testThisConfig.assetsUrl = loadedConfig.assetsUrl;
        }
        if (Array.isArray(loadedConfig.services)) {
            testThisConfig.services = loadedConfig.services;
        }
    }
    return testThisConfig;
}
exports.normalizeConfig = normalizeConfig;
async function validateConfig(config) {
    const normalized = await normalizeConfig(config);
    if (wire_1.isInternalConnectConfig(normalized)) {
        return normalized;
    }
    throw new Error('Invalid Config');
}
exports.validateConfig = validateConfig;
