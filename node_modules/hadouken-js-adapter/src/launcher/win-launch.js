"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const child_process_1 = require("child_process");
const util_1 = require("./util");
function launchRVM(config, manifestLocation, namedPipeName, rvm) {
    const runtimeArgs = `--runtime-arguments=--runtime-information-channel-v6=${namedPipeName}`;
    const rvmArgs = [];
    if (config.installerUI !== true) {
        rvmArgs.push('--no-ui');
    }
    rvmArgs.push(`--config=${manifestLocation}`);
    rvmArgs.push(runtimeArgs);
    if (config.runtime.rvmDir) {
        rvmArgs.push(`--working-dir=${config.runtime.rvmDir}`);
    }
    if (config.assetsUrl) {
        rvmArgs.push(`--assetsUrl=${config.assetsUrl}`);
    }
    return child_process_1.spawn(rvm, rvmArgs, { stdio: ['pipe', 'ignore', 'pipe'], detached: true });
}
async function checkRvmPath() {
    let rvmPath = path.resolve(process.env.LOCALAPPDATA, 'OpenFin', 'OpenFinRVM.exe');
    if (!(await util_1.exists(rvmPath))) {
        rvmPath = path.join(__dirname, '..', '..', 'resources', 'win', 'OpenFinRVM.exe');
    }
    return rvmPath;
}
const checkRVM = makeQueued(checkRvmPath);
async function launch(config, manifestLocation, namedPipeName) {
    const rvmPath = await checkRVM();
    return launchRVM(config, manifestLocation, namedPipeName, rvmPath);
}
exports.default = launch;
function makeQueued(func) {
    let initial;
    return async function (...args) {
        const x = initial || Promise.resolve();
        initial = x
            .then(() => new Promise((resolve, reject) => setImmediate(() => resolve())))
            .then(() => func(...args))
            .catch(() => func(...args));
        return initial;
    };
}
