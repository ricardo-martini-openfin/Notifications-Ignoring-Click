import EntityType from '../shapes/EntityType';
import Transport from '../transport/transport';
export declare type EntityTypeHelpers<T extends EntityType> = T extends EntityType.VIEW ? {
    isView: true;
    isWindow: false;
    isExternal: false;
    isFrame: false;
} : T extends EntityType.WINDOW ? {
    isView: false;
    isWindow: true;
    isExternal: false;
    isFrame: false;
} : T extends EntityType.IFRAME ? {
    isView: false;
    isWindow: false;
    isExternal: false;
    isFrame: true;
} : T extends EntityType.EXTERNAL ? {
    isView: false;
    isWindow: false;
    isExternal: true;
    isFrame: false;
} : T extends EntityType.UNKNOWN ? {
    isView: false;
    isWindow: false;
    isExternal: false;
    isFrame: false;
} : never;
export declare function getBaseMe<T extends EntityType = EntityType>(entityType: T, uuid: string, name: string): OpenFin.EntityInfo & EntityTypeHelpers<T>;
export declare type Me<T extends EntityType> = OpenFin.EntityInfo & (T extends EntityType.VIEW ? EntityTypeHelpers<EntityType.VIEW> & OpenFin.View : T extends EntityType.WINDOW ? EntityTypeHelpers<EntityType.WINDOW> & OpenFin.Window : T extends EntityType.IFRAME ? EntityTypeHelpers<EntityType.IFRAME> & OpenFin.Frame : EntityTypeHelpers<T>);
export declare function getMe<T extends EntityType>(wire: Transport<T>): Me<T>;
