"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResizableView = void 0;
const utils_1 = require("./utils");
class ResizableView {
    constructor(fin, { container, componentState }, viewObserver) {
        this.fin = fin;
        this.windowIdentity = this.fin.Window.getCurrentSync().identity;
        this.container = container;
        this.options = { ...componentState, target: this.windowIdentity };
        this.ofView = this.fin.View.wrapSync({
            uuid: this.windowIdentity.uuid,
            name: this.options.name
        });
        this.resizeObserver = viewObserver;
        this.renderIntoComponent = this.renderIntoComponent.bind(this);
        this.createOrAttachView = this.createOrAttachView.bind(this);
    }
    async renderIntoComponent() {
        await this.createOrAttachView();
        const element = this.container.getElement()[0];
        this.resizeObserver.observe(element);
        // set initial bounds in case resize from add-view already happened (when reparenting view);
        const rect = element.getBoundingClientRect();
        utils_1.setViewBoundsByRect(rect, this.ofView);
        // set tab title
        const { title, url } = await this.ofView.getInfo();
        // if document.title is not set, it will default to the url
        const tabTitle = title === url ? undefined : title;
        utils_1.setTabTitle(this.container.tab, tabTitle);
    }
    async createOrAttachView() {
        const app = this.fin.Application.getCurrentSync();
        const allViews = await app.getViews();
        const view = allViews.find((v) => v.identity.name === this.ofView.identity.name);
        if (view) {
            // this will move an existing view to this window
            await this.ofView.attach(this.windowIdentity);
        }
        else {
            await this.fin.View.create(this.options);
            // With the flag views have loaded the initial url
            if (!this.fin.__internal_.childViews) {
                this.ofView.navigate(this.options.url);
            }
        }
    }
}
exports.ResizableView = ResizableView;
