/// <reference types="jquery" />
import { ViewState } from './resizable-view';
import { View } from '../../../main';
import { MonitorInfo } from '../../system/monitor';
import { Snapshot } from '../../../shapes/Platform';
import LayoutPresetTypes from '../../../shapes/LayoutPresetTypes';
import type { WindowOptions } from '../../../shapes/WindowOptions';
export interface ViewComponent extends GoldenLayout.ContentItem {
    componentState: ViewState;
}
export interface LayoutEventPayload {
    success: boolean;
    reason?: string;
    identity: OpenFin.Identity;
}
export declare const addComponentToContentItem: (component: ViewComponent, target: GoldenLayout.ItemConfig) => void;
export declare const emitLocalEvent: (event: string, identity: OpenFin.Identity, container: HTMLElement) => void;
export declare const generateTabsPreset: (components: ViewComponent[], activeItemIndex?: number) => GoldenLayout.Config;
export declare const getPresetLayoutFunction: {
    columns: (components: ViewComponent[]) => GoldenLayout.Config;
    grid: (components: ViewComponent[]) => GoldenLayout.Config;
    rows: (components: ViewComponent[]) => GoldenLayout.Config;
    tabs: (components: ViewComponent[], activeItemIndex?: number) => GoldenLayout.Config;
};
export declare const generatePresetLayoutContent: (components: ViewComponent[], type: LayoutPresetTypes) => GoldenLayout.Config;
export declare function createComponent(componentState: {
    name: string;
}): GoldenLayout.ComponentConfig;
export declare const debounce: <Args extends any[]>(callback: (...args: Args) => void, delay: number, resizing: boolean) => (...args: Args) => void;
export declare const delay: (delayMilliseconds: number) => Promise<unknown>;
export declare const generateLayoutContent: (componentState: any) => GoldenLayout.Config;
interface EncodedDragPayload {
    sourceIdentity: OpenFin.Identity;
    settings: GoldenLayout.Settings;
}
export declare const getDragPayload: (e: JQuery.DragEventBase<HTMLElement, undefined, HTMLElement, HTMLElement>) => EncodedDragPayload | null;
export declare function handleRenderError(component: ViewComponent, e: Error): void;
export declare const getOutOfWindowDropBounds: (e: {
    screenY: number;
    screenX: number;
}, container: HTMLElement, dimensions: {
    width: number;
    height: number;
}) => OpenFin.Bounds;
export declare const compareIdentities: (sourceIdentity: OpenFin.Identity, currentWindow: OpenFin.Identity) => {
    isSameApp: boolean;
    isSameWindow: boolean;
};
export declare const mock: {
    on: () => void;
};
export declare function setContainerMessage(container: GoldenLayout.Container, message: string): void;
export declare function setTabTitle(tab: GoldenLayout.Tab, title?: string): void;
export declare function setFallbackBodyAndTitle(viewComponent: ViewComponent): void;
export declare const setViewBoundsByRect: (rect: ClientRect | DOMRect | OpenFin.Bounds, ofView: View) => Promise<View>;
export declare const updateViewState: (viewComponent: {
    container: GoldenLayout.Container;
    componentState: any;
}, ofView: View) => Promise<void>;
export declare const getComponentBounds: (bv: ViewComponent) => DOMRect;
export declare const buildFailedEventPayload: (response: string, identity: OpenFin.Identity) => {
    success: boolean;
    response: string;
    identity: OpenFin.Identity;
};
export declare const promisifyViewLoadEvents: (view: View, windowIdentity: OpenFin.Identity) => Promise<LayoutEventPayload>;
export declare const getOutOfBoundsWindows: (snapshot: Snapshot, monitorInfo: MonitorInfo) => Promise<WindowOptions[]>;
export declare const showCloseButtonsIfClosable: (layout: GoldenLayout.GoldenLayout) => void;
export declare const detachOrCloseView: (ofView: View) => Promise<void>;
export declare const isLayoutMaximized: (layout: GoldenLayout.GoldenLayout) => boolean;
export declare const unmaximizeLayout: (layout: GoldenLayout.GoldenLayout) => void;
export declare const getMaximizedContentItem: (layout: GoldenLayout.GoldenLayout) => GoldenLayout.ContentItem | null;
export {};
