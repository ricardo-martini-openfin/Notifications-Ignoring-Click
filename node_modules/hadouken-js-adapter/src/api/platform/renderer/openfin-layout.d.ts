import { View } from '../../../main';
import { ViewComponent } from './utils';
import { FinApi } from '../../fin';
import EntityType from '../../../shapes/EntityType';
export default class LayoutManager {
    private fin;
    private client;
    private container;
    private containerResizeObserver;
    private viewsResizeObserver;
    private dragProxy;
    private isDragging;
    layout: GoldenLayout.GoldenLayout;
    private ofWindow;
    private platform;
    private resizing;
    private showBackgroundImages;
    constructor(fin: FinApi<EntityType.WINDOW>);
    initManager: () => Promise<void>;
    createLayout: (layout: GoldenLayout.Config, container: HTMLElement) => void;
    private setContainer;
    private setupDragDropRegions;
    private replaceLayout;
    private onViewDetached;
    private setupLayoutListeners;
    private onLayoutInit;
    private registerViewComponent;
    private setupWindowListeners;
    private setupResizeObservers;
    /**
     * Shows/hides a view depending on use case
     * @ignore
     */
    private updateViewVisibility;
    private onStackCreated;
    private onTabCreated;
    private onTabMouseUp;
    private replaceCloseTabButton;
    onCloseTabButtonClick: (tab: GoldenLayout.Tab) => Promise<void>;
    onPopoutClick: (stack: GoldenLayout.ContentItem) => void;
    onStackCloseClick: (stack: GoldenLayout.ContentItem) => void;
    private updateButtonDisplay;
    private onItemCreated;
    handleOutOfWindowDrop: (e: {
        screenY: number;
        screenX: number;
    }, parentTab: GoldenLayout.Tab, dimensions: {
        width: any;
        height: any;
    }) => Promise<void>;
    private onTabDragStart;
    private setBackgroundImage;
    private setBackgroundImages;
    private addView;
    private removeView;
    private closeView;
    private createChannelConnections;
    private getViewComponent;
    getViewComponents: () => ViewComponent[];
    private hideHighlight;
    getOfViewFromComponentState: (componentState: {
        name: any;
    }) => View;
    private hideAllViews;
    private showViews;
    private initializeLayoutViews;
    private createResizableView;
    private attachView;
    private createAndAttachView;
    private setupViewEvents;
    private dispatchLayoutEvent;
}
