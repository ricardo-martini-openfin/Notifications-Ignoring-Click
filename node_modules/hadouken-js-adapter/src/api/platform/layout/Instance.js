"use strict";
/* eslint-disable no-undef, import/prefer-default-export */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Layout = void 0;
const validate_1 = require("../../../util/validate");
const common_utils_1 = require("../common-utils");
/**
 * @lends Platform#Layout
 */
class Layout {
    constructor(identity, wire) {
        /**
         * Replaces a Platform window's layout with a new layout.  Any views that were in the old layout but not the new layout
         * will be destroyed.
         * @param { LayoutConfig } layout New layout to implement in the target window.
         * Please see explanation of a layout {@link https://developers.openfin.co/docs/platform-api#section-layout here}.
         * @return { Promise<void> }
         * @tutorial Layout.replace
         */
        this.replace = async (layout) => {
            try {
                this.wire.sendAction('layout-replace');
            }
            catch (e) {
                // don't expose
            }
            const client = await this.platform.getClient();
            await client.dispatch('replace-layout', {
                target: this.identity,
                opts: { layout }
            });
        };
        /**
         * Replaces a Platform window's layout with a preset layout arrangement using the existing Views attached to the window.
         * The preset options are `columns`, `grid`, `rows`, and `tabs`.
         * @param { PresetLayoutOptions } options Mandatory object with `presetType` property that sets which preset layout arrangement to use.
         * The preset options are `columns`, `grid`, `rows`, and `tabs`.
         * @return { Promise<void> }
         * @tutorial Layout.applyPreset
         */
        this.applyPreset = async (options) => {
            try {
                this.wire.sendAction('layout-apply-preset');
            }
            catch (e) {
                // don't expose
            }
            const client = await this.platform.getClient();
            const { presetType } = options;
            if (!presetType || !common_utils_1.isValidPresetType(presetType)) {
                throw new Error('Cannot apply preset layout, please include an applicable presetType property in the PresetLayoutOptions.');
            }
            await client.dispatch('apply-preset-layout', {
                target: this.identity,
                opts: { presetType }
            });
        };
        const errorMsg = validate_1.validateIdentity(identity);
        if (errorMsg) {
            throw new Error(errorMsg);
        }
        this.identity = identity;
        this.platform = fin.Platform.wrapSync({ uuid: identity.uuid });
        if (identity.uuid === fin.me.uuid && identity.name === fin.me.name) {
            this.init = fin.Platform.Layout.init;
        }
        this.wire = wire;
    }
    /**
     * Returns the configuration of the window's layout.  Returns the same information that is returned for all windows in getSnapshot.
     * @return { Promise<LayoutConfig> }
     * @tutorial Layout.getConfig
     */
    async getConfig() {
        try {
            this.wire.sendAction('layout-get-config');
        }
        catch (e) {
            // don't expose
        }
        const client = await this.platform.getClient();
        return client.dispatch('get-frame-snapshot', {
            target: this.identity
        });
    }
}
exports.Layout = Layout;
