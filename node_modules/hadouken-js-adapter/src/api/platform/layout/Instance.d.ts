import { Identity } from '../../../identity';
import Transport from '../../../transport/transport';
import { InitLayoutOptions, PresetLayoutOptions } from './shapes';
/**
 * @lends Platform#Layout
 */
export declare class Layout {
    init: (options?: InitLayoutOptions) => Promise<Layout>;
    identity: Identity;
    private platform;
    wire: Transport;
    constructor(identity: OpenFin.Identity, wire: Transport);
    /**
     * Returns the configuration of the window's layout.  Returns the same information that is returned for all windows in getSnapshot.
     * @return { Promise<LayoutConfig> }
     * @tutorial Layout.getConfig
     */
    getConfig(): Promise<any>;
    /**
     * Replaces a Platform window's layout with a new layout.  Any views that were in the old layout but not the new layout
     * will be destroyed.
     * @param { LayoutConfig } layout New layout to implement in the target window.
     * Please see explanation of a layout {@link https://developers.openfin.co/docs/platform-api#section-layout here}.
     * @return { Promise<void> }
     * @tutorial Layout.replace
     */
    replace: (layout: any) => Promise<void>;
    /**
     * Replaces a Platform window's layout with a preset layout arrangement using the existing Views attached to the window.
     * The preset options are `columns`, `grid`, `rows`, and `tabs`.
     * @param { PresetLayoutOptions } options Mandatory object with `presetType` property that sets which preset layout arrangement to use.
     * The preset options are `columns`, `grid`, `rows`, and `tabs`.
     * @return { Promise<void> }
     * @tutorial Layout.applyPreset
     */
    applyPreset: (options: PresetLayoutOptions) => Promise<void>;
}
