"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../base");
const Instance_1 = require("./Instance");
/**
 * @lends ExternalApplication
 */
class ExternalApplicationModule extends base_1.Base {
    /**
     * Asynchronously returns an External Application object that represents an external application.
     * <br>It is possible to wrap a process that does not yet exist, (for example, to listen for startup-related events)
     * provided its uuid is already known.
     * @param {string} uuid The UUID of the external application to be wrapped
     * @return {Promise.<ExternalApplication>}
     * @tutorial ExternalApplication.wrap
     * @static
     */
    wrap(uuid) {
        try {
            this.wire.sendAction('external-application-wrap');
        }
        catch (e) {
            // we do not want to expose this error, just continue if this analytics-only call fails
        }
        return Promise.resolve(new Instance_1.ExternalApplication(this.wire, { uuid }));
    }
    /**
     * Synchronously returns an External Application object that represents an external application.
     * <br>It is possible to wrap a process that does not yet exist, (for example, to listen for startup-related events)
     * provided its uuid is already known.
     * @param {string} uuid The UUID of the external application to be wrapped
     * @return {ExternalApplication}
     * @tutorial ExternalApplication.wrapSync
     * @static
     */
    wrapSync(uuid) {
        try {
            this.wire.sendAction('external-application-wrap-sync');
        }
        catch (e) {
            // we do not want to expose this error, just continue if this analytics-only call fails
        }
        return new Instance_1.ExternalApplication(this.wire, { uuid });
    }
}
exports.default = ExternalApplicationModule;
